class Solution {
    public int longestValidParentheses(String s) {
        char[] arr = s.toCharArray();
        
        if (arr.length == 0) return 0;
        
        Stack<Integer> stack = new Stack<>();
        int max_length = 0;
        int cur_length = 0;
        stack.push(-1);   // the possible start of the next valid substring is 0
        
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == '(') {
                stack.push(i);
            } else {
                stack.pop();            // pop the index of the nearest '(' or the index of the possible start of the next valid 
                                         // substring -1, that's why we push -1 at first.
                
                if (stack.isEmpty()) {   // if the stack is empty, it means there is no '(' that can match the current ')'
                    stack.push(i);       // so this ')' cuts the current valid substring, push it to the stack to mark
                                         // the new possible start of the next valid substring
                } else {
                    cur_length = i - stack.peek();  // everytime we have a ')' but no '(' is available, the stack is empty
                                                // so no worry if we use the index of ')' in the stack to calculate the length
                    max_length = Math.max(max_length, cur_length);   
                }
            }
        }
        return max_length;
    }
}
