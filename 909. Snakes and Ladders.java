import java.util.LinkedList;
import java.util.Queue;

class Solution {
    public int snakesAndLadders(int[][] board) {
        int N = board.length;
        boolean[] visited = new boolean[N * N + 1];
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(1);
        int move=0;

        while(!queue.isEmpty()){
            for (int size = queue.size(); size > 0; size--) {   //to clear the steps generated by its former step
                int num = queue.poll();
                if (visited[num])
                    continue;

                visited[num] = true;

                if (num == N * N)
                    return move;

                for (int i = 1; i <= 6 && num + i <= N * N; i++) {
                    int next = num + i;
                    int value = getBoardValue(board, next);
                    if (value != -1)
                        next = value;
                    if (!visited[next])
                        queue.offer(next);
                }
            }
            move++;
        }
        return -1;

    }

    private int getBoardValue(int[][] board, int num) {     // get its corresponding position in the array by its number
        int n = board.length;
        int r = (num - 1) / n;
        int x = n - 1 - r;
        int y = r % 2 == 0 ? num - 1 - r * n : n + r * n - num;
        return board[x][y];
    }

}